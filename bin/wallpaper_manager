#!/bin/bash

# Dynamic Wallpaper Manager for AwesomeWM
# Manages wallpaper rotation and per-tag wallpapers

# Configuration
WALLPAPER_DIR="$HOME/Imagens/wallpapers"
CONFIG_DIR="$HOME/.config/awesome"
LOCKSCREEN_WALLPAPER="$CONFIG_DIR/lockscreen-wallpaper.png"
CURRENT_WALLPAPER_FILE="$CONFIG_DIR/.current_wallpaper"
ROTATION_INTERVAL=1800  # 30 minutes in seconds
LOG_FILE="$CONFIG_DIR/wallpaper.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
    log "INFO: $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    log "WARN: $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log "ERROR: $1"
}

# Check dependencies
check_dependencies() {
    local deps=("feh" "convert" "find")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        print_error "Missing dependencies: ${missing[*]}"
        echo "Install with: sudo apt install imagemagick feh"
        exit 1
    fi
}

# Create necessary directories
setup_directories() {
    mkdir -p "$WALLPAPER_DIR"
    touch "$LOG_FILE"
    
    if [ ! -d "$WALLPAPER_DIR" ]; then
        print_error "Could not create wallpaper directory: $WALLPAPER_DIR"
        exit 1
    fi
}

# Get list of available wallpapers
get_wallpapers() {
    find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.bmp" \) 2>/dev/null
}

# Get random wallpaper
get_random_wallpaper() {
    local wallpapers=($(get_wallpapers))
    
    if [ ${#wallpapers[@]} -eq 0 ]; then
        print_error "No wallpapers found in $WALLPAPER_DIR"
        return 1
    fi
    
    local random_index=$((RANDOM % ${#wallpapers[@]}))
    echo "${wallpapers[$random_index]}"
}

# Set wallpaper using feh
set_wallpaper() {
    local wallpaper_path="$1"
    
    if [ ! -f "$wallpaper_path" ]; then
        print_error "Wallpaper file not found: $wallpaper_path"
        return 1
    fi
    
    # Set desktop wallpaper
    feh --bg-scale "$wallpaper_path" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        print_status "Desktop wallpaper set to: $(basename "$wallpaper_path")"
        echo "$wallpaper_path" > "$CURRENT_WALLPAPER_FILE"
        
        # Also update lockscreen wallpaper
        update_lockscreen_wallpaper "$wallpaper_path"
        
        # Notify AwesomeWM if running
        if pgrep -x "awesome" > /dev/null; then
            echo 'awesome.restart()' | awesome-client 2>/dev/null || true
        fi
        
        return 0
    else
        print_error "Failed to set wallpaper"
        return 1
    fi
}

# Update lockscreen wallpaper
update_lockscreen_wallpaper() {
    local source_wallpaper="$1"
    
    if [ ! -f "$source_wallpaper" ]; then
        print_warning "Source wallpaper not found for lockscreen update"
        return 1
    fi
    
    # Get screen resolution
    local resolution=$(xrandr | grep '\*' | head -n1 | awk '{print $1}')
    
    if [ -z "$resolution" ]; then
        resolution="1920x1080"  # Default fallback
    fi
    
    # Resize and set lockscreen wallpaper
    convert "$source_wallpaper" -resize "${resolution}^" -gravity center -extent "$resolution" "$LOCKSCREEN_WALLPAPER" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        print_status "Lockscreen wallpaper updated (${resolution})"
    else
        print_warning "Failed to update lockscreen wallpaper"
    fi
}

# Set wallpaper by name/pattern
set_wallpaper_by_name() {
    local pattern="$1"
    local wallpapers=($(get_wallpapers | grep -i "$pattern"))
    
    if [ ${#wallpapers[@]} -eq 0 ]; then
        print_error "No wallpapers found matching pattern: $pattern"
        return 1
    elif [ ${#wallpapers[@]} -eq 1 ]; then
        set_wallpaper "${wallpapers[0]}"
    else
        echo -e "${BLUE}Multiple wallpapers found:${NC}"
        for i in "${!wallpapers[@]}"; do
            echo "$((i+1)). $(basename "${wallpapers[$i]}")"
        done
        
        read -p "Select wallpaper (1-${#wallpapers[@]}): " choice
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#wallpapers[@]} ]; then
            set_wallpaper "${wallpapers[$((choice-1))]}"
        else
            print_error "Invalid selection"
            return 1
        fi
    fi
}

# List available wallpapers
list_wallpapers() {
    local wallpapers=($(get_wallpapers))
    
    if [ ${#wallpapers[@]} -eq 0 ]; then
        print_warning "No wallpapers found in $WALLPAPER_DIR"
        return 1
    fi
    
    echo -e "${BLUE}Available wallpapers (${#wallpapers[@]} total):${NC}"
    for wallpaper in "${wallpapers[@]}"; do
        local basename=$(basename "$wallpaper")
        local size=$(du -h "$wallpaper" 2>/dev/null | cut -f1)
        echo "  â€¢ $basename ($size)"
    done
}

# Get current wallpaper info
current_wallpaper() {
    if [ -f "$CURRENT_WALLPAPER_FILE" ]; then
        local current=$(cat "$CURRENT_WALLPAPER_FILE")
        if [ -f "$current" ]; then
            echo -e "${GREEN}Current wallpaper:${NC} $(basename "$current")"
            echo -e "${BLUE}Path:${NC} $current"
            
            # Get file info
            local size=$(du -h "$current" 2>/dev/null | cut -f1)
            local dimensions=$(identify "$current" 2>/dev/null | awk '{print $3}')
            echo -e "${BLUE}Size:${NC} $size"
            echo -e "${BLUE}Dimensions:${NC} $dimensions"
        else
            print_warning "Current wallpaper file no longer exists"
        fi
    else
        print_warning "No current wallpaper information available"
    fi
}

# Start rotation daemon
start_rotation() {
    local interval=${1:-$ROTATION_INTERVAL}
    
    print_status "Starting wallpaper rotation (every $interval seconds)"
    print_status "Press Ctrl+C to stop"
    
    # Set initial random wallpaper
    local wallpaper=$(get_random_wallpaper)
    if [ $? -eq 0 ]; then
        set_wallpaper "$wallpaper"
    fi
    
    # Rotation loop
    while true; do
        sleep "$interval"
        
        local wallpaper=$(get_random_wallpaper)
        if [ $? -eq 0 ]; then
            set_wallpaper "$wallpaper"
        else
            print_error "Failed to get random wallpaper"
        fi
    done
}

# Show help
show_help() {
    echo -e "${BLUE}Dynamic Wallpaper Manager for AwesomeWM${NC}"
    echo
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo
    echo "Commands:"
    echo "  random                    Set a random wallpaper"
    echo "  set <pattern>            Set wallpaper by name/pattern"
    echo "  list                     List available wallpapers"
    echo "  current                  Show current wallpaper info"
    echo "  rotate [interval]        Start rotation (default: 30 min)"
    echo "  help                     Show this help"
    echo
    echo "Examples:"
    echo "  $0 random"
    echo "  $0 set mountain"
    echo "  $0 rotate 600           # Rotate every 10 minutes"
    echo
    echo "Configuration:"
    echo "  Wallpaper directory: $WALLPAPER_DIR"
    echo "  Log file: $LOG_FILE"
    echo
    echo "Supported formats: JPG, JPEG, PNG, BMP"
}

# Main function
main() {
    check_dependencies
    setup_directories
    
    case "${1:-help}" in
        "random")
            local wallpaper=$(get_random_wallpaper)
            if [ $? -eq 0 ]; then
                set_wallpaper "$wallpaper"
            fi
            ;;
        "set")
            if [ -z "$2" ]; then
                print_error "Please provide a wallpaper name or pattern"
                exit 1
            fi
            set_wallpaper_by_name "$2"
            ;;
        "list")
            list_wallpapers
            ;;
        "current")
            current_wallpaper
            ;;
        "rotate")
            start_rotation "$2"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
