#!/bin/bash

# Dynamic Theme Manager for AwesomeWM
# Extracts colors from wallpaper and applies dynamic theming

# Configuration
CONFIG_DIR="$HOME/.config/awesome"
THEMES_DIR="$CONFIG_DIR/themes"
DYNAMIC_THEME_DIR="$THEMES_DIR/dynamic"
WALLPAPER_DIR="$HOME/Imagens/wallpapers"
CURRENT_WALLPAPER_FILE="$CONFIG_DIR/.current_wallpaper"
THEME_CACHE_FILE="$CONFIG_DIR/.theme_cache"
LOG_FILE="$CONFIG_DIR/theme_manager.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
    log "INFO: $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    log "WARN: $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log "ERROR: $1"
}

print_theme() {
    echo -e "${PURPLE}[THEME]${NC} $1"
    log "THEME: $1"
}

# Check dependencies
check_dependencies() {
    local deps=("convert" "python3")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        print_error "Missing dependencies: ${missing[*]}"
        echo "Install with: sudo apt install imagemagick python3"
        exit 1
    fi
}

# Create necessary directories
setup_directories() {
    mkdir -p "$DYNAMIC_THEME_DIR"
    touch "$LOG_FILE"
    
    if [ ! -d "$DYNAMIC_THEME_DIR" ]; then
        print_error "Could not create dynamic theme directory"
        exit 1
    fi
}

# Create Python color extractor script
create_color_extractor() {
    cat > "$CONFIG_DIR/extract_colors.py" << 'EOF'
#!/usr/bin/env python3
import sys
import os
from PIL import Image
import colorsys

def rgb_to_hex(rgb):
    return "#{:02x}{:02x}{:02x}".format(int(rgb[0]), int(rgb[1]), int(rgb[2]))

def get_brightness(rgb):
    return (rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / 255

def extract_colors(image_path, num_colors=8):
    try:
        # Open and resize image for faster processing
        img = Image.open(image_path)
        img = img.convert('RGB')
        img = img.resize((150, 150))
        
        # Get most common colors
        colors = img.getcolors(maxcolors=256*256*256)
        if not colors:
            return None
            
        # Sort by frequency and get top colors
        colors.sort(key=lambda x: x[0], reverse=True)
        
        # Extract RGB values
        rgb_colors = []
        for count, color in colors[:num_colors*2]:  # Get more to filter
            rgb_colors.append(color)
        
        # Filter out too similar colors and extreme values
        filtered_colors = []
        for rgb in rgb_colors:
            brightness = get_brightness(rgb)
            # Skip very dark or very light colors
            if 0.1 < brightness < 0.9:
                # Check if color is too similar to existing ones
                is_similar = False
                for existing in filtered_colors:
                    diff = sum(abs(a - b) for a, b in zip(rgb, existing))
                    if diff < 100:  # Threshold for similarity
                        is_similar = True
                        break
                if not is_similar:
                    filtered_colors.append(rgb)
                    if len(filtered_colors) >= num_colors:
                        break
        
        return filtered_colors[:num_colors]
        
    except Exception as e:
        print(f"Error extracting colors: {e}", file=sys.stderr)
        return None

def generate_theme_colors(colors):
    if not colors or len(colors) < 3:
        # Fallback colors
        return {
            'primary': '#48dbfb',
            'secondary': '#feca57', 
            'accent': '#ff6b6b',
            'background': '#1a1a1a',
            'foreground': '#ffffff',
            'background_alt': '#2d2d2d'
        }
    
    # Sort colors by brightness
    colors_with_brightness = [(color, get_brightness(color)) for color in colors]
    colors_with_brightness.sort(key=lambda x: x[1])
    
    # Assign roles based on brightness and saturation
    theme = {}
    
    # Primary: Most saturated mid-brightness color
    primary_candidates = [c for c, b in colors_with_brightness if 0.3 < b < 0.7]
    if primary_candidates:
        # Find most saturated
        primary = max(primary_candidates, key=lambda c: max(c) - min(c))
        theme['primary'] = rgb_to_hex(primary)
    else:
        theme['primary'] = rgb_to_hex(colors[0])
    
    # Secondary: Different hue, similar brightness to primary
    if len(colors) > 1:
        theme['secondary'] = rgb_to_hex(colors[1])
    else:
        theme['secondary'] = '#feca57'
    
    # Accent: Brightest or most contrasting color
    if len(colors) > 2:
        theme['accent'] = rgb_to_hex(colors[2])
    else:
        theme['accent'] = '#ff6b6b'
    
    # Background: Darkest color, made darker
    darkest = min(colors_with_brightness, key=lambda x: x[1])[0]
    bg_color = tuple(max(0, int(c * 0.3)) for c in darkest)  # Make darker
    theme['background'] = rgb_to_hex(bg_color)
    
    # Background alt: Slightly lighter than background
    bg_alt_color = tuple(min(255, int(c * 1.5)) for c in bg_color)
    theme['background_alt'] = rgb_to_hex(bg_alt_color)
    
    # Foreground: Light color or white
    lightest = max(colors_with_brightness, key=lambda x: x[1])[0]
    if get_brightness(lightest) > 0.7:
        theme['foreground'] = rgb_to_hex(lightest)
    else:
        theme['foreground'] = '#ffffff'
    
    return theme

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 extract_colors.py <image_path>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    if not os.path.exists(image_path):
        print(f"Image not found: {image_path}", file=sys.stderr)
        sys.exit(1)
    
    colors = extract_colors(image_path)
    if colors:
        theme = generate_theme_colors(colors)
        
        # Output theme colors in shell-friendly format
        for key, value in theme.items():
            print(f"{key.upper()}='{value}'")
    else:
        print("Failed to extract colors", file=sys.stderr)
        sys.exit(1)
EOF

    chmod +x "$CONFIG_DIR/extract_colors.py"
}

# Get current wallpaper
get_current_wallpaper() {
    if [ -f "$CURRENT_WALLPAPER_FILE" ]; then
        cat "$CURRENT_WALLPAPER_FILE"
    else
        # Try to find current wallpaper from feh
        local feh_bg="$HOME/.fehbg"
        if [ -f "$feh_bg" ]; then
            grep -o "'[^']*'" "$feh_bg" | head -1 | tr -d "'"
        else
            print_warning "No current wallpaper found"
            return 1
        fi
    fi
}

# Extract colors from wallpaper
extract_wallpaper_colors() {
    local wallpaper_path="$1"
    
    if [ ! -f "$wallpaper_path" ]; then
        print_error "Wallpaper file not found: $wallpaper_path"
        return 1
    fi
    
    print_status "Extracting colors from: $(basename "$wallpaper_path")"
    
    # Run Python color extractor
    local colors_output
    colors_output=$(python3 "$CONFIG_DIR/extract_colors.py" "$wallpaper_path" 2>/dev/null)
    
    if [ $? -eq 0 ] && [ -n "$colors_output" ]; then
        echo "$colors_output"
        return 0
    else
        print_error "Failed to extract colors from wallpaper"
        return 1
    fi
}

# Determine if it's day or night
is_daytime() {
    local hour=$(date +%H)
    # Day time: 6 AM to 6 PM
    if [ "$hour" -ge 6 ] && [ "$hour" -lt 18 ]; then
        return 0  # Day
    else
        return 1  # Night
    fi
}

# Generate dynamic theme file
generate_theme_file() {
    local colors="$1"
    local is_day="$2"
    
    # Parse colors
    eval "$colors"
    
    # Adjust colors for day/night
    if [ "$is_day" = "true" ]; then
        # Day theme: lighter backgrounds, darker text
        local bg_normal="#f8f9fa"
        local bg_focus="#e9ecef"
        local fg_normal="#212529"
        local fg_focus="#000000"
        local theme_suffix="day"
    else
        # Night theme: darker backgrounds, lighter text
        local bg_normal="${BACKGROUND:-#1a1a1a}"
        local bg_focus="${BACKGROUND_ALT:-#2d2d2d}"
        local fg_normal="${FOREGROUND:-#ffffff}"
        local fg_focus="#ffffff"
        local theme_suffix="night"
    fi
    
    local theme_file="$DYNAMIC_THEME_DIR/theme_${theme_suffix}.lua"
    
    cat > "$theme_file" << EOF
-- Dynamic Theme for AwesomeWM
-- Generated automatically from wallpaper colors
-- Theme: $theme_suffix
-- Generated: $(date)

local theme_assets = require("beautiful.theme_assets")
local xresources = require("beautiful.xresources")
local dpi = xresources.apply_dpi
local gfs = require("gears.filesystem")
local themes_path = gfs.get_themes_dir()

local theme = {}

-- Colors extracted from wallpaper
theme.primary_color = "${PRIMARY:-#48dbfb}"
theme.secondary_color = "${SECONDARY:-#feca57}"
theme.accent_color = "${ACCENT:-#ff6b6b}"

-- Base colors
theme.bg_normal = "$bg_normal"
theme.bg_focus = "$bg_focus"
theme.bg_urgent = theme.accent_color
theme.bg_minimize = "#444444"
theme.bg_systray = theme.bg_normal

theme.fg_normal = "$fg_normal"
theme.fg_focus = "$fg_focus"
theme.fg_urgent = "#ffffff"
theme.fg_minimize = "#ffffff"

-- Borders
theme.useless_gap = dpi(4)
theme.border_width = dpi(2)
theme.border_normal = theme.bg_focus
theme.border_focus = theme.primary_color
theme.border_marked = theme.accent_color

-- Wibar
theme.wibar_bg = theme.bg_normal .. "ee"  -- Semi-transparent
theme.wibar_fg = theme.fg_normal
theme.wibar_height = dpi(26)

-- Taglist
theme.taglist_bg_focus = theme.primary_color
theme.taglist_fg_focus = "#ffffff"
theme.taglist_bg_occupied = theme.bg_focus
theme.taglist_fg_occupied = theme.fg_normal
theme.taglist_bg_empty = "transparent"
theme.taglist_fg_empty = theme.fg_normal
theme.taglist_spacing = dpi(2)
theme.taglist_font = "JetBrainsMonoNL Nerd Font Medium 11"

-- Tasklist
theme.tasklist_bg_focus = theme.bg_focus
theme.tasklist_fg_focus = theme.fg_focus
theme.tasklist_bg_normal = "transparent"
theme.tasklist_fg_normal = theme.fg_normal

-- Notifications
theme.notification_bg = theme.bg_normal
theme.notification_fg = theme.fg_normal
theme.notification_border_color = theme.primary_color
theme.notification_border_width = dpi(2)
theme.notification_shape = function(cr, width, height)
    return require("gears.shape").rounded_rect(cr, width, height, dpi(8))
end

-- Menu
theme.menu_bg_normal = theme.bg_normal
theme.menu_bg_focus = theme.primary_color
theme.menu_fg_normal = theme.fg_normal
theme.menu_fg_focus = "#ffffff"
theme.menu_border_color = theme.border_focus
theme.menu_border_width = dpi(1)
theme.menu_height = dpi(20)
theme.menu_width = dpi(150)

-- Fonts
theme.font = "JetBrainsMonoNL Nerd Font Medium 10"
theme.taglist_font = theme.taglist_font
theme.notification_font = theme.font

-- Widget colors (for dynamic theming)
theme.widget_primary = theme.primary_color
theme.widget_secondary = theme.secondary_color
theme.widget_accent = theme.accent_color
theme.widget_bg = theme.bg_focus
theme.widget_fg = theme.fg_normal

-- Awesome icon
theme.awesome_icon = themes_path.."default/awesome-icon.png"

-- Layout icons (use default for now)
theme.layout_fairh = themes_path.."default/layouts/fairhw.png"
theme.layout_fairv = themes_path.."default/layouts/fairvw.png"
theme.layout_floating = themes_path.."default/layouts/floatingw.png"
theme.layout_magnifier = themes_path.."default/layouts/magnifierw.png"
theme.layout_max = themes_path.."default/layouts/maxw.png"
theme.layout_fullscreen = themes_path.."default/layouts/fullscreenw.png"
theme.layout_tilebottom = themes_path.."default/layouts/tilebottomw.png"
theme.layout_tileleft = themes_path.."default/layouts/tileleftw.png"
theme.layout_tile = themes_path.."default/layouts/tilew.png"
theme.layout_tiletop = themes_path.."default/layouts/tiletopw.png"
theme.layout_spiral = themes_path.."default/layouts/spiralw.png"
theme.layout_dwindle = themes_path.."default/layouts/dwindlew.png"
theme.layout_cornernw = themes_path.."default/layouts/cornernww.png"
theme.layout_cornerne = themes_path.."default/layouts/cornernew.png"
theme.layout_cornersw = themes_path.."default/layouts/cornersww.png"
theme.layout_cornerse = themes_path.."default/layouts/cornersew.png"

return theme
EOF

    print_theme "Generated theme file: $theme_file"
    echo "$theme_file"
}

# Apply theme to AwesomeWM
apply_theme() {
    local theme_file="$1"
    
    if [ ! -f "$theme_file" ]; then
        print_error "Theme file not found: $theme_file"
        return 1
    fi
    
    # Create symlink to current theme
    local current_theme_link="$DYNAMIC_THEME_DIR/current.lua"
    ln -sf "$theme_file" "$current_theme_link"
    
    print_theme "Applied theme: $(basename "$theme_file")"
    
    # Notify AwesomeWM to reload
    if pgrep -x "awesome" > /dev/null; then
        echo 'awesome.restart()' | awesome-client 2>/dev/null || true
        print_status "AwesomeWM restarted with new theme"
    fi
}

# Generate theme from current wallpaper
generate_from_wallpaper() {
    local wallpaper_path
    wallpaper_path=$(get_current_wallpaper)
    
    if [ $? -ne 0 ] || [ -z "$wallpaper_path" ]; then
        print_error "Could not determine current wallpaper"
        return 1
    fi
    
    local colors
    colors=$(extract_wallpaper_colors "$wallpaper_path")
    
    if [ $? -ne 0 ]; then
        print_error "Could not extract colors from wallpaper"
        return 1
    fi
    
    # Determine day/night
    local is_day
    if is_daytime; then
        is_day="true"
        print_status "Generating day theme"
    else
        is_day="false"
        print_status "Generating night theme"
    fi
    
    # Generate and apply theme
    local theme_file
    theme_file=$(generate_theme_file "$colors" "$is_day")
    
    if [ $? -eq 0 ] && [ -n "$theme_file" ]; then
        apply_theme "$theme_file"
        
        # Cache the result
        echo "WALLPAPER='$wallpaper_path'" > "$THEME_CACHE_FILE"
        echo "THEME_FILE='$theme_file'" >> "$THEME_CACHE_FILE"
        echo "GENERATED=$(date +%s)" >> "$THEME_CACHE_FILE"
        
        return 0
    else
        print_error "Failed to generate theme"
        return 1
    fi
}

# Show current theme info
show_theme_info() {
    if [ -f "$THEME_CACHE_FILE" ]; then
        source "$THEME_CACHE_FILE"
        echo -e "${BLUE}Current Dynamic Theme:${NC}"
        echo "  Wallpaper: $(basename "${WALLPAPER:-Unknown}")"
        echo "  Theme File: $(basename "${THEME_FILE:-Unknown}")"
        echo "  Generated: $(date -d "@${GENERATED:-0}" 2>/dev/null || echo "Unknown")"
        
        if [ -f "$DYNAMIC_THEME_DIR/current.lua" ]; then
            echo "  Status: Active"
        else
            echo "  Status: Inactive"
        fi
    else
        echo -e "${YELLOW}No dynamic theme generated yet${NC}"
    fi
}

# Auto-update theme based on time
auto_update() {
    local interval=${1:-3600}  # Default: 1 hour
    
    print_status "Starting auto-update (every $interval seconds)"
    print_status "Press Ctrl+C to stop"
    
    while true; do
        generate_from_wallpaper
        sleep "$interval"
    done
}

# Show help
show_help() {
    echo -e "${BLUE}Dynamic Theme Manager for AwesomeWM${NC}"
    echo
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo
    echo "Commands:"
    echo "  generate                 Generate theme from current wallpaper"
    echo "  info                     Show current theme information"
    echo "  auto [interval]          Auto-update theme (default: 1 hour)"
    echo "  help                     Show this help"
    echo
    echo "Examples:"
    echo "  $0 generate"
    echo "  $0 auto 1800           # Auto-update every 30 minutes"
    echo
    echo "The theme will automatically switch between day/night variants"
    echo "based on the current time (6 AM - 6 PM = day theme)."
}

# Main function
main() {
    check_dependencies
    setup_directories
    create_color_extractor
    
    case "${1:-generate}" in
        "generate")
            generate_from_wallpaper
            ;;
        "info")
            show_theme_info
            ;;
        "auto")
            auto_update "$2"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
